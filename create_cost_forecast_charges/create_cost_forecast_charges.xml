<platform_solution><objects><library_script><parameters></parameters><custom_fields></custom_fields><name>date_utils.js</name><libraries></libraries><comments></comments><code><![CDATA[// Date utils
    // Expected OpenAir date format is a string of form: "YYYY-MM-DD 0:0:0"
    
    
    function date_to_string(date) {
        var d = new Date(date);
        var month = (d.getMonth() + 1).toString();
        var day = d.getDate().toString();
        var year = d.getFullYear();
    
        // add leading zeros if necessary
        if (month.length < 2)
            month = '0' + month;
        if (day.length < 2)
            day = '0' + day;
    
        return [year, month, day].join('-') + ' 0:0:0';
    }
    
    
    function string_to_date(date_string) {
        var aYMD = date_string.split(' ');
        aYMD = aYMD[0].split('-');
        return new Date(aYMD[0], aYMD[1] - 1, aYMD[2]);
    }
    
    
    function get_day_difference(start_date_string, end_date_string) {
        var start_date = string_to_date(start_date_string);
        var end_date = string_to_date(end_date_string);
        var diff_time = end_date - start_date;
        return Math.ceil(diff_time / (1000 * 60 * 60 * 24));
    }
    
    
    function get_working_day_difference(start_date_string, end_date_string) {
        // source: https://www.codegrepper.com/code-examples/javascript/exclude+weekends+in+javascript+date+calculation
        var startDate = string_to_date(start_date_string);
        var endDate = string_to_date(end_date_string);
        var elapsed, daysBeforeFirstSaturday, daysAfterLastSunday;
        var ifThen = function (a, b, c) {
            return a === b ? c : a;
        };
    
        elapsed = endDate - startDate;
        elapsed /= 86400000;
    
        daysBeforeFirstSunday = (7 - startDate.getDay()) % 7;
        daysAfterLastSunday = endDate.getDay();
    
        elapsed -= (daysBeforeFirstSunday + daysAfterLastSunday);
        elapsed = (elapsed / 7) * 5;
        elapsed += ifThen(daysBeforeFirstSunday - 1, -1, 0) + ifThen(daysAfterLastSunday, 6, 5);
    
        return Math.ceil(elapsed);
    }
    
    
    function add_days(date_string, days_int) {
        var date = string_to_date(date_string);
        date.setDate(date.getDate() + days_int);
        return date;
    }
    
    
    function add_working_days(date_string, days_int) {
        // source: https://gist.github.com/psdtohtml5/7000529
        var date = Dates.string_to_date(date_string);
        var day = date.getDay();
        date.setDate(date.getDate() + days_int + (day === 6 ? 2 : +!day) + (Math.floor((days_int - 1 + (day % 6 || 1)) / 5) * 2));
        return date;
    }
    
    
    function get_days_to_weekday(date_string) {
        var date = string_to_date(date_string);
        var day = date.getDay();
        var day_shift = 0;
        if (day === 0) {  // Sunday
            day_shift = 1;
        }
        if (day === 6) {  // Saturday
            day_shift = 2;
        }
        return day_shift;
    }
    
    
    // make functions available to other scripts
    exports.date_to_string = date_to_string;
    exports.string_to_date = string_to_date;
    exports.get_day_difference = get_day_difference;
    exports.get_working_day_difference = get_working_day_difference;
    exports.add_days = add_days;
    exports.add_working_days = add_working_days;
    exports.get_days_to_weekday = get_days_to_weekday;]]></code></library_script><text_parameter><field_size>25</field_size><name>forecastPOchargestage</name><max_length>25</max_length><description></description></text_parameter><text_parameter><field_size>25</field_size><name>forecastTIMEchargestage</name><max_length>25</max_length><description></description></text_parameter><text_cust_field><field_size>25</field_size><never_copy>false</never_copy><required>false</required><association>slip</association><divider_text></divider_text><unique>true</unique><name>customChargeExternal</name><description></description><with_notes>false</with_notes><hint></hint><title>External ID</title><hidden>false</hidden><max_length>25</max_length><divider>false</divider></text_cust_field><schedule_script><custom_fields><custom_field>customChargeExternal</custom_field></custom_fields><name>create_cost_forecast_charges.js</name><comments></comments><libraries><library>date_utils.js</library></libraries><entrance_function>main</entrance_function><parameters><parameter>forecastPOchargestage</parameter><parameter>forecastTIMEchargestage</parameter></parameters><__is_linked>true</__is_linked><code><![CDATA[function main() {
        var pbgarray = find_pbgs();
        NSOA.meta.log('debug', 'Found ' + pbgarray.length + ' pbgs recently updated... ');
        var tasks = get_tasks(pbgarray);
        NSOA.meta.log('debug', 'Found ' + tasks.length + ' tasks for this project.');
        var pbts = get_pbts(tasks);
        NSOA.meta.log('debug', 'Task updates to make '+ JSON.stringify(pbts));
        var createbudgets = create_upsert(pbts);
    
    }
    
    function find_pbgs(){
        var today = new Date(); //Variable created to capture today's date for future calculation
        var minutesprior = 20;
        var minutespriorvalue = new Date(today.getTime() - (minutesprior * 60 * 1000));
        var datenewer = new NSOA.record.oaDate();
        datenewer.day = minutespriorvalue.getDate();
        datenewer.month = (minutespriorvalue.getMonth()+1);
        datenewer.year = minutespriorvalue.getFullYear();
        datenewer.hour= minutespriorvalue.getHours();
        datenewer.second = minutespriorvalue.getSeconds();
        datenewer.minute = minutespriorvalue.getMinutes();
        NSOA.meta.log('debug', 'Get recent pbgs started..');
        var readRequest = [], resultsJSON, resultsArray_JSON = [];
        var increment = 0, pageSize = 1000, limitReached = false;
        var pbgcriteria = new NSOA.record.oaProjectBudgetGroup();
        pbgcriteria.approval_status = "O";    
        while (limitReached === false) {
    
            readRequest[0] = {
                type: "ProjectBudgetGroup",
                fields: "id, projectid",
                method: "equal to",
                objects: [pbgcriteria, datenewer],
                attributes: [{
                    name: "limit",
                    value: increment + "," + pageSize
                },            
                {
                    name : 'filter',
                    value : 'newer-than'
                },
                {
                    name : 'field',
                    value : 'updated'
               }]
            };
    
    
            var resultsArray = NSOA.wsapi.read(readRequest);
    
            if (!resultsArray || !resultsArray[0] || !resultsArray[0].objects) {
                // An unexpected error has occurred!
            } else if (resultsArray[0].errors !== null && resultsArray[0].errors.length > 0) {
                // There are errors to handle!
            } else {
                // Process the response as expected
    
                resultsArray[0].objects.forEach(function (o) {
                    resultsJSON = {
                        id: o.id,
                        project: o.projectid
                    };
                    resultsArray_JSON.push(resultsJSON);
                });
            }
    
            if (isEmpty(resultsArray[0].objects) || resultsArray[0].objects.length < pageSize) limitReached = true;
            increment += pageSize;
        }
       
        return resultsArray_JSON;
    }
    
    function get_tasks(array){
        var alltasks =[];
        for(var i =0; i<array.length; i++){
            var readRequest = [], resultsJSON, resultsArray_JSON = [];
            var increment = 0, pageSize = 1000, limitReached = false;
            var task = new NSOA.record.oaProjecttask();
            task.projectid =array[i].project;
            task.classification = "T";
            task.is_a_phase = '0';
            while (limitReached === false) {
    
                readRequest[0] = {
                    type: "Projecttask",
                    fields: "id, projectid",
                    method: "equal to",
                    objects: [task],
                    attributes: [{
                        name: "limit",
                        value: increment + "," + pageSize
                    }]
                };
    
    
                var resultsArray = NSOA.wsapi.read(readRequest);
    
                if (!resultsArray || !resultsArray[0] || !resultsArray[0].objects) {
                    // An unexpected error has occurred!
                } else if (resultsArray[0].errors !== null && resultsArray[0].errors.length > 0) {
                    // There are errors to handle!
                } else {
                    // Process the response as expected
    
                    resultsArray[0].objects.forEach(function (o) {
                        resultsJSON = {
                            id: o.id,
                            project: o.projectid
                        };
                        alltasks.push(resultsJSON);
                    });
                }
    
                if (isEmpty(resultsArray[0].objects) || resultsArray[0].objects.length < pageSize) limitReached = true;
                increment += pageSize;
            }
    
        }
        return alltasks;
    }
    function get_pbts(array){
        var datelib = require('date_utils');
        var pbtupds = [];
        var objsforupd = [];
        for(var i =0; i<array.length; i++){
            var sumarray = [];
            var readRequest = [], resultsJSON, resultsArray_JSON = [];
            var increment = 0, pageSize = 1000, limitReached = false;
            var pbt = new NSOA.record.oaProjectBudgetTransaction();
            pbt.projectid =array[i].project;
            pbt.project_taskid = array[i].id;
            while (limitReached === false) {
    
                readRequest[0] = {
                    type: "ProjectBudgetTransaction",
                    fields: "id, total, category, itemid, date, job_codeid, productid, projectid, project_budget_ruleid, currency, customerid",
                    method: "equal to",
                    objects: [pbt],
                    attributes: [{
                        name: "limit",
                        value: increment + "," + pageSize
                    }]
                };
    
    
                var resultsArray = NSOA.wsapi.read(readRequest);
    
                if (!resultsArray || !resultsArray[0] || !resultsArray[0].objects) {
                    // An unexpected error has occurred!
                } else if (resultsArray[0].errors !== null && resultsArray[0].errors.length > 0) {
                    // There are errors to handle!
                } else {
                    // Process the response as expected
    
                    resultsArray[0].objects.forEach(function (o) {
                        resultsJSON = {
                            id: o.id,
                            total: o.total,
                            category: o.category,
                            itemid: o.itemid,
                            date: o.date,
                            job_codeid: o.job_codeid,
                            productid: o.productid,
                            projectid: o.projectid,
                            currency: o.currency,
                            project_budget_ruleid: o.project_budget_ruleid,
                            customer: o.customerid,
                            mergekey: o.category+o.projectid+o.date.substr(0, 7)
                        };
                        pbtupds.push(resultsJSON);
                    });
                }
    
                if (isEmpty(resultsArray[0].objects) || resultsArray[0].objects.length < pageSize) limitReached = true;
                increment += pageSize;
            }
    
        }
        for(var j = 0; j<pbtupds.length; j++){
            var unique = objsforupd.map(function(e) { return e.mergekey; }).indexOf(pbtupds[j].mergekey);
            if(unique === -1){
                var taskJSON= {
                            id: pbtupds[j].id,
                            total: pbtupds[j].total,
                            category: pbtupds[j].category,
                            itemid: pbtupds[j].itemid,
                            date: pbtupds[j].date,
                            job_codeid: pbtupds[j].job_codeid,
                            productid: pbtupds[j].productid,
                            projectid: pbtupds[j].projectid,
                            currency: pbtupds[j].currency,
                            project_budget_ruleid: pbtupds[j].project_budget_ruleid,
                            customer: pbtupds[j].customerid,
                            mergekey: pbtupds[j].mergekey
                        };
                objsforupd.push(taskJSON);
            }else{objsforupd[unique].total = Number(objsforupd[unique].total) + Number(pbtupds[j].total);}
        }
        return objsforupd;
    }
    
    function create_upsert(array){
        var PO = NSOA.context.getParameter('forecastPOchargestage');
        var time = NSOA.context.getParameter('forecastTIMEchargestage');
        var upsertarray = [];
        for(var i=0;i<array.length;i++){ 
            var obj = new NSOA.record.oaSlip();
            obj.name = array[i].mergekey;
            obj.date = array[i].date;
            obj.projectid = array[i].projectid;
            obj.total = array[i].total;
            obj.type = 'F';
            obj.customChargeExternal__c = array[i].mergekey;
            if(array[i].category == '1'){
                obj.slip_stageid = time;
            }else{obj.slip_stageid = PO;}
            var attribute = [{
                name : 'lookup',
                value : 'customChargeExternal__c'
            },{name: "update_custom", value: "1"}];
    
            // Invoke the upsert call
            var upsresults = NSOA.wsapi.upsert(attribute, [obj]);
            NSOA.meta.log('debug',JSON.stringify(upsresults));
        }
        return;
    }
    
    function splitArrayIntoChunksOfLen(arr, len) {
      var chunks = [], i = 0, n = arr.length;
      while (i < n) {
        chunks.push(arr.slice(i, i += len));
      }
      return chunks;
    }
    
    
    function isEmpty(value) {
        if (value === null) {
            return true;
        } else if (value === undefined) {
            return true;
        } else if (value === '') {
            return true;
        } else if (value === ' ') {
            return true;
        } else if (value === 'null') {
            return true;
        } else {
            return false;
        }
    }]]></code></schedule_script></objects><version>1.1</version><title>create_cost_forecast_charges</title><description></description></platform_solution>