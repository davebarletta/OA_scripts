<platform_solution><objects><schedule_script><custom_fields></custom_fields><name>populate_pipeline_fields.js</name><comments></comments><libraries></libraries><entrance_function>main</entrance_function><parameters></parameters><__is_linked>true</__is_linked><code><![CDATA[function main() { 
    //Get all Active Projects
    var activeprjs = new NSOA.record.oaProject(); //Create the object to define the search criteria for our read
    activeprjs.active = '1'; 
    // Define the read request
    var readactive = {
        type: 'Project', //SOAP Object to search
        method: 'equal to',  //Whether it is inclusive or exclusive search criteria
        fields: 'id, name, customerid, prjamount__c', //Fields to return in your array
        attributes: [ 
            {
                name: 'limit', //Limit is required
                value: '1000' //how many records to return, maximum allowance is 1000
            }
        ],
        objects: [ 
            activeprjs //add the search criteria variable from above in here
        ]
    };
    // Invoke the read call
    var allactiveprojects = NSOA.wsapi.read(readactive); //Passing the results of your search to a new Array vartiable
    NSOA.meta.log('debug', 'There are '+ allactiveprojects[0].objects.length+ ' active projects.'); //Used to validate that the search worked
    for (var a = 0; a < allactiveprojects[0].objects.length; a++){ //this helps to loop through each record within the Array of results
        try{
            var pbgrecord = new NSOA.record.oaProjectBudgetGroup();
            pbgrecord.projectid =allactiveprojects[0].objects[a].id;
            // Define the read request
            var readpbg = {
                type: 'ProjectBudgetGroup', //SOAP Object to search
                method: 'equal to',  //Whether it is inclusive or exclusive search criteria
                fields: 'id, total_calculated_cost, approval_status', //Fields to return in your array
                attributes: [ 
                    {
                        name: 'limit', //Limit is required
                        value: '1000' //how many records to return, maximum allowance is 1000
                    }
                ],
                objects: [ 
                    pbgrecord //add the search criteria variable from above in here
                ]
            };
            var allpbgs = NSOA.wsapi.read(readpbg); //Passing the results of your search to a new Array vartiable
            if(allpbgs[0].objects.length !== null){
                NSOA.meta.log('debug', 'For this project: ' + allactiveprojects[0].objects[a].id + ' there are ' + allpbgs[0].objects.length + ' Project Budget Records.');
                var approvalstatusarray = [];
                var costarray=[];
                for(var b=0; b < allpbgs[0].objects.length; b++){
                   approvalstatusarray.push(allpbgs[0].objects[b].approval_status);
                    costarray.push(allpbgs[0].objects[b].total_calculated_cost);
                }
                var approvedbudget = approvalstatusarray.indexOf('A');
                var openbudget = approvalstatusarray.indexOf('O');
                NSOA.meta.log('debug','Approved: '+ approvedbudget+ ' Open: '+ openbudget );
                 NSOA.meta.log('debug',JSON.stringify(costarray));
                var currentprjrev = allactiveprojects[0].objects[a].prjamount__c;
                var targetcost = costarray[approvedbudget];
                var forecastcost = costarray[openbudget];
                if (forecastcost === undefined){
                    forecastcost =0;
                }else{forecastcost=forecastcost;}
                if (targetcost === undefined){
                    targetcost =0;
                }else{targetcost=targetcost;}
                var margin = (currentprjrev - forecastcost)/currentprjrev;
                var variance = targetcost - forecastcost;
                var contribution = currentprjrev - forecastcost;
                if(margin !== margin){
                    margin = 0;
                }else{margin=margin;}
                
                var update_custom = [{
                    name:'update_custom',
                    value:'1'
                }
                ];
                
                var updateproject = new NSOA.record.oaProject();
                updateproject.id=allactiveprojects[0].objects[a].id;
                updateproject.name=allactiveprojects[0].objects[a].name;
                updateproject.customerid=allactiveprojects[0].objects[a].customerid;
                updateproject.prjTargetCost__c = targetcost;
                updateproject.prjForecastCost__c = forecastcost;
                updateproject.prjVariance__c = variance;
                updateproject.prjMargin__c = margin;
                updateproject.prjContribution__c = contribution;
                var projectupsert = NSOA.wsapi.modify(update_custom, [updateproject]);
                NSOA.meta.log('debug', JSON.stringify(projectupsert));
                
                NSOA.meta.log('debug', 'Approved: '+ approvedbudget+ ' Open: '+ openbudget+ ' Target: '+targetcost+' Forecast: '+ forecastcost+ ' Revenue: '+ currentprjrev+' Variance: '+ variance+ ' Margin: '+margin+' Contribution: '+contribution);
                
                
            }else{
                NSOA.meta.log('debug', 'There were no Project Budget records found for project: ' + allactiveprojects[0].objects[a].id);
            }
            
        }catch(error){
            NSOA.meta.log('error','There were no Project Budget records found for project: ' + allactiveprojects[0].objects[a].id);
        }
    }


}]]></code></schedule_script></objects><version>1.1</version><title>Populate Pipeline Fields</title><description>Calculates and Populates fields on project properties screen for use in reporting</description></platform_solution>